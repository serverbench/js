{"version":3,"sources":["/Users/quique/Documents/serverbench/js/dist/chunk-66YK7PQO.cjs","../src/Serverbench.ts"],"names":["_Serverbench","clientId","clientSecret","test","Store","Voting","find","Member","realm","url","body","domain","headers"],"mappings":"AAAA,iIAAwC,wDAAyC,wDAAyC,8CCAnG,IAKFA,CAAAA,CAArB,MAAqBA,CAAY,CAQrB,WAAA,CAAYC,CAAAA,CAAkBC,CAAAA,CAAsBC,CAAAA,CAAe,CACvE,IAAA,CAAK,QAAA,CAAWF,CAAAA,CAChB,IAAA,CAAK,YAAA,CAAeC,CAAAA,CACpB,IAAA,CAAK,IAAA,CAAOC,CAChB,CAEA,OAAO,GAAA,CAAIF,CAAAA,CAAkBC,CAAAA,CAAsBC,CAAAA,CAAgB,CAAA,CAAA,CAAO,CACtE,MAAA,CAAI,CAACH,CAAAA,CAAY,QAAA,EAAYA,CAAAA,CAAY,QAAA,CAAS,QAAA,GAAaC,CAAAA,EAAYD,CAAAA,CAAY,QAAA,CAAS,YAAA,GAAiBE,CAAAA,EAAgBF,CAAAA,CAAY,QAAA,CAAS,IAAA,GAASG,CAAAA,CAAAA,EAAAA,CAC3JH,CAAAA,CAAY,QAAA,CAAW,IAAIA,CAAAA,CAAYC,CAAAA,CAAUC,CAAAA,CAAcC,CAAI,CAAA,CAAA,CAEhEH,CAAAA,CAAY,QACvB,CAEA,IAAI,KAAA,CAAA,CAAQ,CACR,OAAO,IAAII,wBAAAA,CAAM,IAAI,CACzB,CAEA,IAAI,MAAA,CAAA,CAAS,CACT,OAAO,IAAIC,wBAAAA,CAAO,IAAI,CAC1B,CAEA,MAAa,MAAA,CAAOC,CAAAA,CAGjB,CACC,OAAOC,mBAAAA,CAAO,UAAA,CAAW,IAAA,CAAM,MAAM,IAAA,CAAK,IAAA,CAAK,WAAA,CAAa,gBAAA,CAAkBD,CAAI,CAAC,CACvF,CAEA,MAAc,KAAA,CAAME,CAAAA,CAAeC,CAAAA,CAAaC,CAAAA,CAAY,CACxD,IAAMC,CAAAA,CAAS,IAAA,CAAK,IAAA,CAAO,4BAAA,CAA+B,iCAAA,CACpDC,CAAAA,CAAU,IAAI,OAAA,CAAQ,CACxB,aAAA,CAAe,CAAA,OAAA,EAAU,IAAA,CAAK,YAAY,CAAA,CAAA","file":"/Users/quique/Documents/serverbench/js/dist/chunk-66YK7PQO.cjs","sourcesContent":[null,"import { nanoid } from \"nanoid/non-secure\"\nimport Member from \"./Member.js\"\nimport Store from \"./store/Store.js\"\nimport Voting from \"./voting/Voting.js\"\n\nexport default class Serverbench {\n\n    clientId: string\n    clientSecret: string\n    test: boolean\n\n    private static instance: Serverbench | null = null\n\n    private constructor(clientId: string, clientSecret: string, test: boolean) {\n        this.clientId = clientId\n        this.clientSecret = clientSecret\n        this.test = test\n    }\n\n    static get(clientId: string, clientSecret: string, test: boolean = false) {\n        if (!Serverbench.instance || Serverbench.instance.clientId !== clientId || Serverbench.instance.clientSecret !== clientSecret || Serverbench.instance.test !== test) {\n            Serverbench.instance = new Serverbench(clientId, clientSecret, test)\n        }\n        return Serverbench.instance\n    }\n\n    get store() {\n        return new Store(this)\n    }\n\n    get voting() {\n        return new Voting(this)\n    }\n\n    public async member(find: {\n        username?: string,\n        eid?: string,\n    }) {\n        return Member.fromObject(this, await this.post('community', '/member/search', find))\n    }\n\n    private async fetch(realm: string, url: string, body?: any) {\n        const domain = this.test ? 'https://dev.serverbench.io' : 'https://api.beta.serverbench.io'\n        const headers = new Headers({\n            authorization: `ApiKey ${this.clientSecret}`,\n        })\n        if (body) {\n            headers.set('Content-Type', 'application/json')\n        }\n        const response = await fetch(`${domain}/${realm}/${this.clientId}${url}`, {\n            headers,\n            method: body ? 'POST' : 'GET',\n            body: body ? JSON.stringify(body) : undefined\n        })\n        if (response.status < 200 || response.status >= 300) {\n            throw new Error(response.statusText)\n        }\n        \n        return response.json()\n    }\n\n    private rid() {\n        return nanoid()\n    }\n\n    public socket(action: string, handleMessage = (data: any) => { }, ignoreClose = false) {\n        const domain = this.test ? 'ws://localhost:3030' : 'wss://live.beta.serverbench.io'\n        let ws = new WebSocket(`${domain}?${new URLSearchParams({\n            key: this.clientSecret,\n        })}`)\n        let i = 0\n        let expecting = this.rid()\n        ws.onopen = () => {\n            i = 0\n            ws.send(JSON.stringify({\n                action: `community.${this.clientId}.${action}`,\n                rid: expecting\n            }))\n        }\n        ws.onmessage = (event) => {\n            const data = JSON.parse(event.data)\n            if (data.result != null && ((Array.isArray(data.result) && data.result.length) || Object.keys(data.result).length > 0) && data.rid == expecting) {\n                handleMessage(data.result)\n            } else {\n                let action = [data.realm]\n                if (data.realm == 'community') {\n                    action.push(this.clientId)\n                }\n                action.push(data.action)\n                expecting = this.rid()\n                ws.send(JSON.stringify({\n                    action: action.join('.'),\n                    rid: expecting\n                }))\n            }\n        }\n        if (!ignoreClose) {\n            ws.onclose = () => {\n                i++\n                setTimeout(() => {\n                    ws = this.socket(action, handleMessage, true).ws\n                }, Math.min(1000 * (i) * 5, 30 * 1000));\n            }\n        }\n        return {\n            dispose: () => {\n                ws.onclose = null\n                ws.close()\n            },\n            ws\n        }\n    }\n\n    async get(realm: string, url: string) {\n        return this.fetch(realm, url)\n    }\n\n    async post(realm: string, url: string, body: any = {}) {\n        return this.fetch(realm, url, body)\n    }\n\n}"]}