{"version":3,"sources":["../src/Serverbench.ts"],"sourcesContent":["import Store from \"./store/Store.js\"\r\n\r\nexport default class Serverbench {\r\n\r\n    clientId: string\r\n    clientSecret: string\r\n    test: boolean\r\n\r\n    private static instance: Serverbench | null = null\r\n\r\n    private constructor(clientId: string, clientSecret: string, test: boolean) {\r\n        this.clientId = clientId\r\n        this.clientSecret = clientSecret\r\n        this.test = test\r\n    }\r\n\r\n    static get(clientId: string, clientSecret: string, test: boolean = false) {\r\n        if (!Serverbench.instance || Serverbench.instance.clientId !== clientId || Serverbench.instance.clientSecret !== clientSecret || Serverbench.instance.test !== test) {\r\n            Serverbench.instance = new Serverbench(clientId, clientSecret, test)\r\n        }\r\n        return Serverbench.instance\r\n    }\r\n\r\n    get store() {\r\n        return new Store(this)\r\n    }\r\n\r\n    private async fetch(realm: string, url: string, body?: any) {\r\n        const domain = this.test ? 'https://dev.serverbench.io' : 'https://api.serverbench.io'\r\n        const headers = new Headers({\r\n            authorization: `ApiKey ${this.clientSecret}`,\r\n        })\r\n        if (body) {\r\n            headers.set('Content-Type', 'application/json')\r\n        }\r\n        const response = await fetch(`${domain}/${realm}/${this.clientId}${url}`, {\r\n            headers,\r\n            method: body ? 'POST' : 'GET',\r\n            body: body ? JSON.stringify(body) : undefined\r\n        })\r\n        return response.json()\r\n    }\r\n\r\n    async get(realm: string, url: string) {\r\n        return this.fetch(realm, url)\r\n    }\r\n\r\n    async post(realm: string, url: string, body: any = {}) {\r\n        return this.fetch(realm, url, body)\r\n    }\r\n\r\n}"],"mappings":";;;;;AAEA,IAAqB,eAArB,MAAqB,aAAY;AAAA,EAQrB,YAAY,UAAkB,cAAsB,MAAe;AACvE,SAAK,WAAW;AAChB,SAAK,eAAe;AACpB,SAAK,OAAO;AAAA,EAChB;AAAA,EAEA,OAAO,IAAI,UAAkB,cAAsB,OAAgB,OAAO;AACtE,QAAI,CAAC,aAAY,YAAY,aAAY,SAAS,aAAa,YAAY,aAAY,SAAS,iBAAiB,gBAAgB,aAAY,SAAS,SAAS,MAAM;AACjK,mBAAY,WAAW,IAAI,aAAY,UAAU,cAAc,IAAI;AAAA,IACvE;AACA,WAAO,aAAY;AAAA,EACvB;AAAA,EAEA,IAAI,QAAQ;AACR,WAAO,IAAI,MAAM,IAAI;AAAA,EACzB;AAAA,EAEA,MAAc,MAAM,OAAe,KAAa,MAAY;AACxD,UAAM,SAAS,KAAK,OAAO,+BAA+B;AAC1D,UAAM,UAAU,IAAI,QAAQ;AAAA,MACxB,eAAe,UAAU,KAAK,YAAY;AAAA,IAC9C,CAAC;AACD,QAAI,MAAM;AACN,cAAQ,IAAI,gBAAgB,kBAAkB;AAAA,IAClD;AACA,UAAM,WAAW,MAAM,MAAM,GAAG,MAAM,IAAI,KAAK,IAAI,KAAK,QAAQ,GAAG,GAAG,IAAI;AAAA,MACtE;AAAA,MACA,QAAQ,OAAO,SAAS;AAAA,MACxB,MAAM,OAAO,KAAK,UAAU,IAAI,IAAI;AAAA,IACxC,CAAC;AACD,WAAO,SAAS,KAAK;AAAA,EACzB;AAAA,EAEA,MAAM,IAAI,OAAe,KAAa;AAClC,WAAO,KAAK,MAAM,OAAO,GAAG;AAAA,EAChC;AAAA,EAEA,MAAM,KAAK,OAAe,KAAa,OAAY,CAAC,GAAG;AACnD,WAAO,KAAK,MAAM,OAAO,KAAK,IAAI;AAAA,EACtC;AAEJ;AAjDqB,aAMF,WAA+B;AANlD,IAAqB,cAArB;","names":[]}