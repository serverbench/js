{"version":3,"sources":["../src/Serverbench.ts"],"sourcesContent":["import Member from \"./Member.js\"\r\nimport Store from \"./store/Store.js\"\r\nimport Voting from \"./voting/Voting.js\"\r\n\r\nexport default class Serverbench {\r\n\r\n    clientId: string\r\n    clientSecret: string\r\n    test: boolean\r\n\r\n    private static instance: Serverbench | null = null\r\n\r\n    private constructor(clientId: string, clientSecret: string, test: boolean) {\r\n        this.clientId = clientId\r\n        this.clientSecret = clientSecret\r\n        this.test = test\r\n    }\r\n\r\n    static get(clientId: string, clientSecret: string, test: boolean = false) {\r\n        if (!Serverbench.instance || Serverbench.instance.clientId !== clientId || Serverbench.instance.clientSecret !== clientSecret || Serverbench.instance.test !== test) {\r\n            Serverbench.instance = new Serverbench(clientId, clientSecret, test)\r\n        }\r\n        return Serverbench.instance\r\n    }\r\n\r\n    get store() {\r\n        return new Store(this)\r\n    }\r\n\r\n    get voting() {\r\n        return new Voting(this)\r\n    }\r\n\r\n    public async member(find: {\r\n        username?: string,\r\n        eid?: string,\r\n    }) {\r\n        return Member.fromObject(this, await this.post('community', '/member/search', find))\r\n    }\r\n\r\n    private async fetch(realm: string, url: string, body?: any) {\r\n        const domain = this.test ? 'https://dev.serverbench.io' : 'https://api.beta.serverbench.io'\r\n        const headers = new Headers({\r\n            authorization: `ApiKey ${this.clientSecret}`,\r\n        })\r\n        if (body) {\r\n            headers.set('Content-Type', 'application/json')\r\n        }\r\n        const response = await fetch(`${domain}/${realm}/${this.clientId}${url}`, {\r\n            headers,\r\n            method: body ? 'POST' : 'GET',\r\n            body: body ? JSON.stringify(body) : undefined\r\n        })\r\n        return response.json()\r\n    }\r\n\r\n    public socket(action: string, handleMessage = (data: any) => { }, ignoreClose = false) {\r\n        const domain = this.test ? 'ws://localhost:3030' : 'wss://stream.beta.serverbench.io'\r\n        let ws = new WebSocket(`${domain}?${new URLSearchParams({\r\n            key: this.clientSecret,\r\n        })}`)\r\n        let i = 0\r\n        ws.onopen = () => {\r\n            i = 0\r\n            ws.send(JSON.stringify({\r\n                action: `community.${this.clientId}.${action}`,\r\n            }))\r\n        }\r\n        ws.onmessage = (event) => {\r\n            const data = JSON.parse(event.data)\r\n            if (data.result) {\r\n                handleMessage(data.result)\r\n            } else {\r\n                let action = [data.realm]\r\n                if (data.realm == 'community') {\r\n                    action.push(this.clientId)\r\n                }\r\n                action.push(data.action)\r\n                ws.send(JSON.stringify({\r\n                    action: action.join('.'),\r\n                }))\r\n            }\r\n        }\r\n        if (!ignoreClose) {\r\n            ws.onclose = () => {\r\n                i++\r\n                setTimeout(() => {\r\n                    ws = this.socket(action, handleMessage, true).ws\r\n                }, Math.min(1000 * (i) * 5, 30 * 1000));\r\n            }\r\n        }\r\n        return {\r\n            dispose: () => {\r\n                ws.onclose = null\r\n                ws.close()\r\n            },\r\n            ws\r\n        }\r\n    }\r\n\r\n    async get(realm: string, url: string) {\r\n        return this.fetch(realm, url)\r\n    }\r\n\r\n    async post(realm: string, url: string, body: any = {}) {\r\n        return this.fetch(realm, url, body)\r\n    }\r\n\r\n}"],"mappings":"wHAIA,IAAqBA,EAArB,MAAqBA,CAAY,CAQrB,YAAYC,EAAkBC,EAAsBC,EAAe,CACvE,KAAK,SAAWF,EAChB,KAAK,aAAeC,EACpB,KAAK,KAAOC,CAChB,CAEA,OAAO,IAAIF,EAAkBC,EAAsBC,EAAgB,GAAO,CACtE,OAAI,CAACH,EAAY,UAAYA,EAAY,SAAS,WAAaC,GAAYD,EAAY,SAAS,eAAiBE,GAAgBF,EAAY,SAAS,OAASG,KAC3JH,EAAY,SAAW,IAAIA,EAAYC,EAAUC,EAAcC,CAAI,GAEhEH,EAAY,QACvB,CAEA,IAAI,OAAQ,CACR,OAAO,IAAII,EAAM,IAAI,CACzB,CAEA,IAAI,QAAS,CACT,OAAO,IAAIC,EAAO,IAAI,CAC1B,CAEA,MAAa,OAAOC,EAGjB,CACC,OAAOC,EAAO,WAAW,KAAM,MAAM,KAAK,KAAK,YAAa,iBAAkBD,CAAI,CAAC,CACvF,CAEA,MAAc,MAAME,EAAeC,EAAaC,EAAY,CACxD,IAAMC,EAAS,KAAK,KAAO,6BAA+B,kCACpDC,EAAU,IAAI,QAAQ,CACxB,cAAe,UAAU,KAAK,YAAY,EAC9C,CAAC,EACD,OAAIF,GACAE,EAAQ,IAAI,eAAgB,kBAAkB,GAEjC,MAAM,MAAM,GAAGD,CAAM,IAAIH,CAAK,IAAI,KAAK,QAAQ,GAAGC,CAAG,GAAI,CACtE,QAAAG,EACA,OAAQF,EAAO,OAAS,MACxB,KAAMA,EAAO,KAAK,UAAUA,CAAI,EAAI,MACxC,CAAC,GACe,KAAK,CACzB,CAEO,OAAOG,EAAgBC,EAAiBC,GAAc,CAAE,EAAGC,EAAc,GAAO,CACnF,IAAML,EAAS,KAAK,KAAO,sBAAwB,mCAC/CM,EAAK,IAAI,UAAU,GAAGN,CAAM,IAAI,IAAI,gBAAgB,CACpD,IAAK,KAAK,YACd,CAAC,CAAC,EAAE,EACAO,EAAI,EACR,OAAAD,EAAG,OAAS,IAAM,CACdC,EAAI,EACJD,EAAG,KAAK,KAAK,UAAU,CACnB,OAAQ,aAAa,KAAK,QAAQ,IAAIJ,CAAM,EAChD,CAAC,CAAC,CACN,EACAI,EAAG,UAAaE,GAAU,CACtB,IAAMJ,EAAO,KAAK,MAAMI,EAAM,IAAI,EAClC,GAAIJ,EAAK,OACLD,EAAcC,EAAK,MAAM,MACtB,CACH,IAAIF,EAAS,CAACE,EAAK,KAAK,EACpBA,EAAK,OAAS,aACdF,EAAO,KAAK,KAAK,QAAQ,EAE7BA,EAAO,KAAKE,EAAK,MAAM,EACvBE,EAAG,KAAK,KAAK,UAAU,CACnB,OAAQJ,EAAO,KAAK,GAAG,CAC3B,CAAC,CAAC,CACN,CACJ,EACKG,IACDC,EAAG,QAAU,IAAM,CACfC,IACA,WAAW,IAAM,CACbD,EAAK,KAAK,OAAOJ,EAAQC,EAAe,EAAI,EAAE,EAClD,EAAG,KAAK,IAAI,IAAQI,EAAK,EAAG,GAAK,GAAI,CAAC,CAC1C,GAEG,CACH,QAAS,IAAM,CACXD,EAAG,QAAU,KACbA,EAAG,MAAM,CACb,EACA,GAAAA,CACJ,CACJ,CAEA,MAAM,IAAIT,EAAeC,EAAa,CAClC,OAAO,KAAK,MAAMD,EAAOC,CAAG,CAChC,CAEA,MAAM,KAAKD,EAAeC,EAAaC,EAAY,CAAC,EAAG,CACnD,OAAO,KAAK,MAAMF,EAAOC,EAAKC,CAAI,CACtC,CAEJ,EAxGqBV,EAMF,SAA+B,KANlD,IAAqBoB,EAArBpB","names":["_Serverbench","clientId","clientSecret","test","Store","Voting","find","Member","realm","url","body","domain","headers","action","handleMessage","data","ignoreClose","ws","i","event","Serverbench"]}