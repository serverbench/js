{"version":3,"sources":["../src/Serverbench.ts"],"sourcesContent":["import Member from \"./Member.js\"\nimport Store from \"./store/Store.js\"\nimport Voting from \"./voting/Voting.js\"\n\nexport default class Serverbench {\n\n    clientId: string\n    clientSecret: string\n    test: boolean\n\n    private static instance: Serverbench | null = null\n\n    private constructor(clientId: string, clientSecret: string, test: boolean) {\n        this.clientId = clientId\n        this.clientSecret = clientSecret\n        this.test = test\n    }\n\n    static get(clientId: string, clientSecret: string, test: boolean = false) {\n        if (!Serverbench.instance || Serverbench.instance.clientId !== clientId || Serverbench.instance.clientSecret !== clientSecret || Serverbench.instance.test !== test) {\n            Serverbench.instance = new Serverbench(clientId, clientSecret, test)\n        }\n        return Serverbench.instance\n    }\n\n    get store() {\n        return new Store(this)\n    }\n\n    get voting() {\n        return new Voting(this)\n    }\n\n    public async member(find: {\n        username?: string,\n        eid?: string,\n    }) {\n        return Member.fromObject(this, await this.post('community', '/member/search', find))\n    }\n\n    private async fetch(realm: string, url: string, body?: any) {\n        const domain = this.test ? 'https://dev.serverbench.io' : 'https://api.beta.serverbench.io'\n        const headers = new Headers({\n            authorization: `ApiKey ${this.clientSecret}`,\n        })\n        if (body) {\n            headers.set('Content-Type', 'application/json')\n        }\n        const response = await fetch(`${domain}/${realm}/${this.clientId}${url}`, {\n            headers,\n            method: body ? 'POST' : 'GET',\n            body: body ? JSON.stringify(body) : undefined\n        })\n        if(response.status < 200 || response.status >= 300) {\n            throw new Error(response.statusText)\n        }\n        return response.json()\n    }\n\n    public socket(action: string, handleMessage = (data: any) => { }, ignoreClose = false) {\n        const domain = this.test ? 'ws://localhost:3030' : 'wss://stream.beta.serverbench.io'\n        let ws = new WebSocket(`${domain}?${new URLSearchParams({\n            key: this.clientSecret,\n        })}`)\n        let i = 0\n        ws.onopen = () => {\n            i = 0\n            ws.send(JSON.stringify({\n                action: `community.${this.clientId}.${action}`,\n            }))\n        }\n        ws.onmessage = (event) => {\n            const data = JSON.parse(event.data)\n            if (data.result != null && ((Array.isArray(data.result) && data.result.length) || Object.keys(data.result).length > 0)) {\n                handleMessage(data.result)\n            } else {\n                let action = [data.realm]\n                if (data.realm == 'community') {\n                    action.push(this.clientId)\n                }\n                action.push(data.action)\n                ws.send(JSON.stringify({\n                    action: action.join('.'),\n                }))\n            }\n        }\n        if (!ignoreClose) {\n            ws.onclose = () => {\n                i++\n                setTimeout(() => {\n                    ws = this.socket(action, handleMessage, true).ws\n                }, Math.min(1000 * (i) * 5, 30 * 1000));\n            }\n        }\n        return {\n            dispose: () => {\n                ws.onclose = null\n                ws.close()\n            },\n            ws\n        }\n    }\n\n    async get(realm: string, url: string) {\n        return this.fetch(realm, url)\n    }\n\n    async post(realm: string, url: string, body: any = {}) {\n        return this.fetch(realm, url, body)\n    }\n\n}"],"mappings":"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","names":["_Serverbench","clientId","clientSecret","test","Store","Voting","find","Member","realm","url","body","domain","headers","response","action","handleMessage","data","ignoreClose","ws","i","event","Serverbench"]}